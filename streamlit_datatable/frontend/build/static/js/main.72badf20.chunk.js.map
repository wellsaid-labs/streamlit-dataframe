{"version":3,"sources":["ThemeProvider.tsx","Datatable.tsx","index.tsx"],"names":["ThemeProvider","props","stTheme","theme","muiTheme","React","useMemo","textColorScale","chroma","scale","textColor","backgroundColor","mode","createMuiTheme","palette","primary","main","primaryColor","action","active","hover","hex","selected","disabled","background","default","paper","secondaryBackgroundColor","text","secondary","typography","fontFamily","font","children","Html","dangerouslySetInnerHTML","__html","getRows","rows","i","data","headerRows","row","j","columns","content","getCell","toString","length","push","getColumns","Datatable","Error","title","options","selectableRows","rowHover","customSearch","searchQuery","currentRow","isFound","forEach","col","toLowerCase","indexOf","withStreamlitConnection","args","ResizeObserver","Streamlit","setFrameHeight","observe","document","body","ReactDOM","render","StrictMode","getElementById"],"mappings":"8OA8DeA,EA9CX,SAACC,GACH,IAAMC,EAAUD,EAAME,MAEhBC,EAAWC,IAAMC,SAAQ,WAC7B,GAAe,MAAXJ,EAAJ,CAIA,IAAMK,EAAiBC,IACpBC,MAAM,CAACP,EAAQQ,UAAWR,EAAQS,kBAClCC,KAAK,OAER,OAAOC,YAAe,CACpBC,QAAS,CACPC,QAAS,CACPC,KAAMd,EAAQe,cAEhBC,OAAQ,CACNC,OAAQjB,EAAQQ,UAChBU,MAAOb,EAAe,IAAKc,MAC3BC,SAAUpB,EAAQe,aAClBM,SAAUhB,EAAe,IAAKc,OAEhCG,WAAY,CACVC,QAASvB,EAAQS,gBACjBe,MAAOxB,EAAQyB,0BAEjBC,KAAM,CACJb,QAASb,EAAQQ,UACjBmB,UAAWtB,EAAe,IAAKc,MAC/BE,SAAUhB,EAAe,IAAKc,QAGlCS,WAAY,CACVC,WAAY7B,EAAQ8B,WAGvB,CAAC9B,IAEJ,OAAgB,MAAZE,EACK,mCAAGH,EAAMgC,WAGX,cAAC,IAAD,CAAkB9B,MAAOC,EAAzB,SAAoCH,EAAMgC,YC7CnD,SAASC,EAAKjC,GACZ,OAAKA,EAAM2B,KAGJ,sBAAMO,wBAAyB,CAAEC,OAAQnC,EAAM2B,QAF7C,yBAWX,SAASS,EAAQpC,GAEf,IADA,IAAMqC,EAAO,GACJC,EAAItC,EAAMuC,KAAKC,WAAYF,EAAItC,EAAMuC,KAAKF,KAAMC,IAAK,CAE5D,IADA,IAAMG,EAAM,GACHC,EAAI,EAAGA,EAAI1C,EAAMuC,KAAKI,QAASD,IAAK,CAC3C,IAAME,EAAU5C,EAAMuC,KAAKM,QAAQP,EAAGI,GAAGE,QAAQE,WAC9B,MAAfF,EAAQ,IAA8C,MAAhCA,EAAQA,EAAQG,OAAS,GACjDN,EAAIO,KAAK,cAACf,EAAD,CAAMN,KAAMiB,KAErBH,EAAIO,KAAKJ,GAGbP,EAAKW,KAAKP,GAEZ,OAAOJ,EAGT,SAASY,EAAWjD,GAElB,IADA,IAAM2C,EAAU,GACPD,EAAI,EAAGA,EAAI1C,EAAMuC,KAAKI,QAASD,IACtCC,EAAQK,KAAKhD,EAAMuC,KAAKM,QAAQ,EAAGH,GAAGE,QAAQE,YAEhD,OAAOH,EAIT,SAASO,EAAUlD,GACjB,GAA8B,IAA1BA,EAAMuC,KAAKC,WACb,MAAM,IAAIW,MAAM,2BAGlB,OACE,cAAC,IAAD,CACEC,MAAOpD,EAAMoD,MACbb,KAAMH,EAAQpC,GACd2C,QAASM,EAAWjD,GACpBqD,QAAS,CACPC,eAAgB,OAChBC,UAAU,EACVC,aAAc,SAACC,EAAqBC,GAClC,IAAIC,GAAU,EAOd,OANAD,EAAWE,SAAQ,SAAAC,IACDA,IAAQ5B,EAAO4B,EAAI7D,MAAM2B,KAAOkC,EAAIf,YACxCgB,cAAcC,QAAQN,EAAYK,gBAAkB,IAC9DH,GAAU,MAGPA,MAQFK,mBAAwB,SAAChE,GACtC,IAAKA,EAAME,MACT,MAAM,IAAIiD,MAAM,kCAGlB,OACE,cAAC,EAAD,CAAejD,MAAOF,EAAME,MAA5B,SACE,cAACgD,EAAD,CAAWE,MAAOpD,EAAMiE,KAAKb,MAAOb,KAAMvC,EAAMiE,KAAK1B,YCjFpC,IAAI2B,gBAAe,WACxCC,IAAUC,oBAGGC,QAAQC,SAASC,MAEhCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFJ,SAASK,eAAe,W","file":"static/js/main.72badf20.chunk.js","sourcesContent":["// NOTE: `ThemeProvider` implementation was initially borrowed from:\n// https://github.com/whitphx/streamlit-webrtc/blob/master/streamlit_webrtc/frontend/src/ThemeProvider.tsx\nimport {\n  createMuiTheme,\n  ThemeProvider as MuiThemeProvider\n} from \"@material-ui/core/styles\";\nimport chroma from \"chroma-js\";\nimport React from \"react\";\nimport { Theme } from \"streamlit-component-lib\";\n\ninterface StreamlitThemeProviderProps {\n  theme: Theme | undefined;\n}\n\nexport const ThemeProvider: React.VFC<\n  React.PropsWithChildren<StreamlitThemeProviderProps>\n> = (props) => {\n  const stTheme = props.theme;\n\n  const muiTheme = React.useMemo(() => {\n    if (stTheme == null) {\n      return undefined;\n    }\n\n    const textColorScale = chroma\n      .scale([stTheme.textColor, stTheme.backgroundColor])\n      .mode(\"lab\");\n\n    return createMuiTheme({\n      palette: {\n        primary: {\n          main: stTheme.primaryColor,\n        },\n        action: {\n          active: stTheme.textColor,\n          hover: textColorScale(0.5).hex(),\n          selected: stTheme.primaryColor,\n          disabled: textColorScale(0.5).hex(),\n        },\n        background: {\n          default: stTheme.backgroundColor,\n          paper: stTheme.secondaryBackgroundColor,\n        },\n        text: {\n          primary: stTheme.textColor,\n          secondary: textColorScale(0.1).hex(),\n          disabled: textColorScale(0.5).hex(),\n        },\n      },\n      typography: {\n        fontFamily: stTheme.font,\n      },\n    });\n  }, [stTheme]);\n\n  if (muiTheme == null) {\n    return <>{props.children}</>;\n  }\n\n  return <MuiThemeProvider theme={muiTheme}>{props.children}</MuiThemeProvider>;\n};\n\nexport default ThemeProvider;\n","import MUIDataTable from \"mui-datatables\"\nimport React from \"react\"\nimport {\n  ArrowTable,\n  withStreamlitConnection\n} from \"streamlit-component-lib\"\nimport ThemeProvider from \"./ThemeProvider\"\n\n\ninterface HtmlProps {\n  text: string | undefined\n}\n\n\nfunction Html(props: HtmlProps) {\n  if (!props.text) {\n    return <span />\n  }\n  return <span dangerouslySetInnerHTML={{ __html: props.text }} />\n}\n\ninterface DatatableProps {\n  data: ArrowTable\n  title: string\n}\n\n\nfunction getRows(props: DatatableProps) {\n  const rows = []\n  for (let i = props.data.headerRows; i < props.data.rows; i++) {\n    const row = []\n    for (let j = 1; j < props.data.columns; j++) {\n      const content = props.data.getCell(i, j).content.toString()\n      if (content[0] === \"<\" && content[content.length - 1] === \">\") {\n        row.push(<Html text={content}></Html>)\n      } else {\n        row.push(content)\n      }\n    }\n    rows.push(row)\n  }\n  return rows\n}\n\nfunction getColumns(props: DatatableProps) {\n  const columns = []\n  for (let j = 1; j < props.data.columns; j++) {\n    columns.push(props.data.getCell(0, j).content.toString())\n  }\n  return columns\n}\n\n\nfunction Datatable(props: DatatableProps) {\n  if (props.data.headerRows !== 1) {\n    throw new Error(\"Expecting 1 header row.\")\n  }\n\n  return (\n    <MUIDataTable\n      title={props.title}\n      data={getRows(props)}\n      columns={getColumns(props)}\n      options={{\n        selectableRows: 'none',\n        rowHover: false,\n        customSearch: (searchQuery: string, currentRow: any[]) => {\n          let isFound = false\n          currentRow.forEach(col => {\n            const content = col === Html ? col.props.text : col.toString()\n            if (content.toLowerCase().indexOf(searchQuery.toLowerCase()) >= 0) {\n              isFound = true\n            }\n          })\n          return isFound\n        },\n      }}\n    />\n  )\n}\n\n\nexport default withStreamlitConnection((props) => {\n  if (!props.theme) {\n    throw new Error(\"Expecting theme to be defined.\")\n  }\n\n  return (\n    <ThemeProvider theme={props.theme}>\n      <Datatable title={props.args.title} data={props.args.data} />\n    </ThemeProvider>\n  )\n})\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  Streamlit\n} from \"streamlit-component-lib\";\nimport Datatable from \"./Datatable\";\n\n// @ts-ignore\nconst resizeObserver = new ResizeObserver(() => {\n  Streamlit.setFrameHeight()\n})\n\nresizeObserver.observe(document.body)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Datatable />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}